

switch 조건문 == if문으로 모든 내용을 대치 가능 

조건문에서 비교할 초이스(값)이 많은 경우,
if-else문을 반복 사용하는 것보다 switch문을 이용하면 가독성을 높일 수 있다 


EX)

switch (condition) {
  case value1:
    statement1;
    
    break;
  case value2:
    statement2;
    break;
  ...
  default:
    statement3;
}

condition의 값이 value1이면 statement1을, value2면 statement2를, 

그 어느 것도 아니라면 default가 적용되어 statement3을 실행한다.

조건이 맞아 break를 만나면 그 이후의 비교는 하지 않으며, switch문을 종료시킨다.

default문은 switch문의 가장 마지막에 위치하므로 default 문의 실행이 종료하면 switch 문을 빠져나간다. 따라서 break를 생략하는 것이 일반적이다.

// 조건에는 여러 동작이 들어올 수 있지만 
// 스위치의 경우 보편적으로 값이 true , false 값이 아닌 문자, 숫자의 경우가 많아 
// 특정 상황이 아닌 이상 if - else 사용이 유리하다.


조건이 여러 상태를 공유하는 경우도 switch 문을 통해 작성 가능하다.

EX) 

function sequentialSizes(val) {
  var answer = "";
  switch (val){
    case 1:
    case 2:
    case 3: 
      answer = "최상등급"; 
      break;
    case 4:
    case 5:
    case 6: 
      answer = "중간등급";
      break;
    case 7:
    case 8: 
    case 9:
      answer = "하등급"; 
      break;
  }
  return answer;
}



⭐️⭐️⭐️⭐️⭐️

function 함수 


함수는 코드를 그룹화하고 재사용 가능한 블록을 만들어줍니다.
함수는 function 키워드를 사용하여 정의되며, 이름을 가질 수도 있고, 익명 함수로 정의될 수도 있습니다.


   () 소괄호 , {} 중괄호 , [] 대괄호 

   함수에서 블록은 {} 기준으로 나뉨.
   


1. 함수 선언 (Function Declaration):
   자바스크립트에서 함수를 선언하는 방법은 다음과 같습니다:

   function addNumbers(a, b) {
    let result = a + b;
    return result;
  }
2. 함수 호출 (Function Call):
   함수를 호출하는 방법은 다음과 같습니다:

   let result = addNumbers(3, 5);
   console.log(result);

   자바스크립트에서 함수는 객체로 취급되기 때문에 변수에 할당하거나 다른 함수의 매개변수로 전달할 수도 있습니다. 
   함수 선언은 프로그램의 어느 위치에서나 가능하며, 함수 호출은 프로그램의 실행 흐름에 따라 필요한 때에 이루어집니다.

   기본적인 함수 사용 방법 
    

    (함수)    (함수명)   (매개변수)
   function helloWorld(params) {
      (실행값)
   }


// 기명 함수

function sayHello() {
  console.log("Hello!");
}

// 익명 함수

let greet = function() {
  console.log("Greetings!");
};
